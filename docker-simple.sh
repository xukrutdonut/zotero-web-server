#!/bin/bash

# üê≥ Script simple Docker para Servidor Zotero Web
# NeuropediaLab - 2025

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

CONTAINER_NAME="zotero-web-server"
IMAGE_NAME="neuropedialab/zotero-web-server:latest"

show_header() {
    echo -e "${BLUE}"
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ  üê≥ Docker Simple - Servidor Zotero Web    ‚îÇ"
    echo "‚îÇ              NeuropediaLab 2025             ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo -e "${NC}"
}

show_help() {
    echo -e "${YELLOW}üìã Comandos disponibles:${NC}"
    echo "  build    - üèóÔ∏è  Construir imagen Docker"
    echo "  start    - üöÄ Iniciar servidor"
    echo "  stop     - üõë Parar servidor"
    echo "  restart  - üîÑ Reiniciar servidor"
    echo "  logs     - üìã Ver logs"
    echo "  shell    - üíª Acceder al shell"
    echo "  status   - üìä Ver estado"
    echo "  clean    - üßπ Limpiar contenedor"
    echo "  help     - ‚ùì Mostrar ayuda"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Error: Docker no est√° instalado${NC}"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Error: Docker no est√° ejecut√°ndose${NC}"
        echo -e "${YELLOW}üí° Ejecuta: sudo systemctl start docker${NC}"
        exit 1
    fi
}

build_image() {
    echo -e "${BLUE}üèóÔ∏è Construyendo imagen Docker...${NC}"
    
    docker build -t $IMAGE_NAME . --no-cache
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Imagen construida exitosamente${NC}"
        docker images | grep neuropedialab/zotero-web-server
    else
        echo -e "${RED}‚ùå Error construyendo la imagen${NC}"
        exit 1
    fi
}

start_server() {
    echo -e "${BLUE}üöÄ Iniciando Servidor Zotero Web...${NC}"
    
    # Parar contenedor existente si est√° ejecut√°ndose
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
    
    # Crear directorios necesarios
    mkdir -p logs data
    
    # Iniciar contenedor
    docker run -d \
        --name $CONTAINER_NAME \
        --restart unless-stopped \
        -p 8080:8080 \
        -v "/home/arkantu/Documentos/Zotero Biblioteca:/app/data/biblioteca:ro" \
        -v "/home/arkantu/Zotero/zotero.sqlite:/app/data/zotero.sqlite:ro" \
        -v "$(pwd)/logs:/app/logs" \
        -v "zotero-data:/app/data" \
        -e NODE_ENV=production \
        -e PORT=8080 \
        -e BIBLIOTECA_DIR=/app/data/biblioteca \
        -e ZOTERO_DB=/app/data/zotero.sqlite \
        -e ZOTERO_API_KEY=zotero-neuropedialab-docker-$(date +%Y%m%d) \
        $IMAGE_NAME
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Servidor iniciado exitosamente${NC}"
        
        # Obtener IP local
        LOCAL_IP=$(hostname -I | awk '{print $1}')
        
        echo -e "\n${CYAN}üåê URLs de acceso:${NC}"
        echo -e "${GREEN}  Local: http://localhost:8080${NC}"
        echo -e "${GREEN}  Red:   http://$LOCAL_IP:8080${NC}"
        
        echo -e "\n${PURPLE}üí° Comandos √∫tiles:${NC}"
        echo -e "  ./docker-simple.sh logs    - Ver logs"
        echo -e "  ./docker-simple.sh status  - Ver estado"
        echo -e "  ./docker-simple.sh shell   - Acceder al contenedor"
        
        # Esperar un poco y mostrar estado
        echo -e "\n${BLUE}‚è≥ Esperando que el servidor inicie...${NC}"
        sleep 5
        
        if curl -s http://localhost:8080/api/stats > /dev/null; then
            echo -e "${GREEN}üéâ ¬°Servidor funcionando correctamente!${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Servidor iniciando, puede tardar unos segundos...${NC}"
        fi
        
    else
        echo -e "${RED}‚ùå Error iniciando el servidor${NC}"
        exit 1
    fi
}

stop_server() {
    echo -e "${YELLOW}üõë Parando Servidor Zotero Web...${NC}"
    
    docker stop $CONTAINER_NAME
    docker rm $CONTAINER_NAME
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Servidor parado exitosamente${NC}"
    else
        echo -e "${RED}‚ùå Error parando el servidor${NC}"
    fi
}

restart_server() {
    echo -e "${BLUE}üîÑ Reiniciando Servidor Zotero Web...${NC}"
    stop_server
    sleep 2
    start_server
}

show_logs() {
    echo -e "${BLUE}üìã Mostrando logs del contenedor...${NC}"
    echo -e "${YELLOW}üí° Presiona Ctrl+C para salir${NC}"
    
    docker logs -f $CONTAINER_NAME
}

enter_shell() {
    echo -e "${BLUE}üíª Accediendo al shell del contenedor...${NC}"
    
    if ! docker ps | grep -q $CONTAINER_NAME; then
        echo -e "${RED}‚ùå Error: El contenedor no est√° ejecut√°ndose${NC}"
        echo -e "${YELLOW}üí° Ejecuta: ./docker-simple.sh start${NC}"
        exit 1
    fi
    
    docker exec -it $CONTAINER_NAME /bin/bash
}

show_status() {
    echo -e "${BLUE}üìä Estado del Servidor Zotero Web:${NC}\n"
    
    if docker ps | grep -q $CONTAINER_NAME; then
        echo -e "${GREEN}‚úÖ Contenedor: EJECUT√ÅNDOSE${NC}"
        
        # Informaci√≥n del contenedor
        CONTAINER_INFO=$(docker inspect $CONTAINER_NAME --format '{{.State.Status}} - {{.NetworkSettings.IPAddress}}' 2>/dev/null)
        echo -e "${CYAN}üìã Info: $CONTAINER_INFO${NC}"
        
        # Test de conectividad
        if curl -s http://localhost:8080/api/stats > /dev/null; then
            echo -e "${GREEN}üåê Servidor Web: FUNCIONANDO${NC}"
            
            # Estad√≠sticas b√°sicas
            STATS=$(curl -s http://localhost:8080/api/stats 2>/dev/null)
            if [ $? -eq 0 ] && [ "$STATS" != "" ]; then
                echo -e "${PURPLE}üìä API: Respondiendo correctamente${NC}"
            fi
        else
            echo -e "${RED}‚ùå Servidor Web: NO RESPONDE${NC}"
        fi
    else
        echo -e "${RED}‚ùå Contenedor: PARADO${NC}"
    fi
    
    # Uso de recursos
    echo -e "\n${BLUE}üìà Recursos:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" $CONTAINER_NAME 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Contenedor no ejecut√°ndose${NC}"
}

clean_container() {
    echo -e "${YELLOW}üßπ Limpiando contenedor e imagen...${NC}"
    
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
    docker rmi $IMAGE_NAME 2>/dev/null || true
    docker volume rm zotero-data 2>/dev/null || true
    docker system prune -f
    
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
}

# Script principal
main() {
    show_header
    check_docker
    
    case "${1:-help}" in
        "build")
            build_image
            ;;
        "start")
            # Construir imagen si no existe
            if ! docker image inspect $IMAGE_NAME &> /dev/null; then
                echo -e "${YELLOW}‚ö†Ô∏è Imagen no encontrada, construyendo...${NC}"
                build_image
            fi
            start_server
            ;;
        "stop")
            stop_server
            ;;
        "restart")
            restart_server
            ;;
        "logs")
            show_logs
            ;;
        "shell")
            enter_shell
            ;;
        "status")
            show_status
            ;;
        "clean")
            clean_container
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"